name: pipeline

on:
  pull_request:
    branches:
      - main

  schedule:
    - cron: "0 6 * * 5"

  workflow_dispatch:
    inputs:
      ingestion_lookback_days:
        description: The number of days into the past for which to ingest data for
        required: true
        default: '2'

env:
  CICD_RUN: "${{ github.event_name == 'pull_request' && 'True' || 'False' }}"
  DBT_PROFILES_DIR: "${{ github.workspace }}/dbt"
  DBT_PROJECT_DIR: "${{ github.workspace }}/dbt"
  DATA_DIR: "/home/runner/work/medium_scraper/medium_scraper/output"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  INGESTION_LOOKBACK_WINDOW: "${{ github.event_name == 'pull_request' && '2' || (github.event.inputs.ingestion_lookback_days || '7') }}"
  PAT_GITHUB:  ${{ secrets.PAT_GITHUB }}

jobs:
  run-pre-commit:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        id: setup-python

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - run: poetry run pre-commit run --all-files

  ingestion:
    if: always() && (github.event_name != 'pull_request' || needs.run-pre-commit.result =='success')
    needs: [run-pre-commit]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        id: setup-python

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - run: poetry run ingestion

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-ingestion
          path: ${{ github.workspace }}

  transformation:
    needs: [ingestion]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact-ingestion
          path: ${{ github.workspace }}

      - uses: actions/setup-python@v4
        id: setup-python

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - run: poetry run spacy download en_core_web_sm

      - run: poetry run transformation

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-transformation
          path: ${{ github.workspace }}

  data-products:
    needs: [transformation]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact-transformation
          path: ${{ github.workspace }}

      - uses: actions/setup-python@v4
        id: setup-python

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - run: poetry run data_products
        env:
          RECIPIENT_EMAIL_ADDRESS: "${{ github.event_name == 'pull_request' && '123@mailslurp.com' || secrets.SENDER_EMAIL_ADDRESS }}"
          SENDER_EMAIL_ADDRESS: ${{ secrets.SENDER_EMAIL_ADDRESS }}
          SENDER_EMAIL_PASSWORD: ${{ secrets.SENDER_EMAIL_PASSWORD }}

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-data-products
          path: ${{ github.workspace }}

  automerge_pull_requests:
    if: github.event_name == 'pull_request'
    needs: [data-products]
    runs-on: ubuntu-latest
    steps:
      - name: Merge pull request
        uses: pascalgn/automerge-action@v0.15.6
        env:
          MERGE_METHOD: "squash"

  merge-to-main:
    if: github.event_name != 'pull_request'
    needs: [data-products]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact-data-products
          path: ${{ github.workspace }}

      - uses: EndBug/add-and-commit@v9
        with:
          author_name: Github Actions
          author_email: actions@github.com
          new_branch: weekly_run_branch_${{ github.run_id }}

      # To ensure the PR triggers CI workflows it needs to use someone's PAT instead of the default GITHUB_TOKEN
      - name: Create Pull Request
        run: |
          export GITHUB_TOKEN= && \
          echo ${{ secrets.PAT_GITHUB }} > token.txt && \
          gh auth login --with-token < token.txt && \
          gh pr create -B main -H weekly_run_branch_${{ github.run_id }} --title 'weekly_run ${{ github.run_id }}' --body 'Created by Github action' --label 'automerge'
